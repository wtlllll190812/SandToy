// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "UnityCG.cginc"

RWTexture2D<float4> Result; //渲染结果
Texture2D<float4> FlowMap; //流速图
int seed;
/*
RWStructuredBuffer<float2> VelocityW; //流速 写入
StructuredBuffer<float2> VelocityR; //流速 读取

RWStructuredBuffer<float> Curled; // 卷曲度
RWStructuredBuffer<float> Divergenced; //发散度

RWStructuredBuffer<float> DensityW; //密度 写入
StructuredBuffer<float> DensityR; //密度 读取

RWStructuredBuffer<float4> ColorW; //颜色 写入
StructuredBuffer<float4> ColorR; //颜色 读取
*/

float Rand(uint3 id)
{
    return frac(sin(id.x + id.y + id.x * id.y + seed) * 10000.0);
}

float remap(float input, float2 rangeIn, float2 rangeOut)
{
    return (input - rangeIn.x) / (rangeIn.y - rangeIn.x) * (rangeOut.y - rangeOut.x) + rangeOut.x;
}

float2 remap(float2 input, float2 rangeIn, float2 rangeOut)
{
    return float2(remap(input.x, rangeIn, rangeOut), remap(input.y, rangeIn, rangeOut));
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float2 delta = remap(FlowMap[id.xy].xy * 2, float2(0, 1), float2(-1, 1));
  
    Result[id.xy] = Result[id.xy + delta];
    //  Result[id.xy] = float4(FlowMap[id.xy].xy, 1, 0);
  //  Result[id.xy] = Result[id.xy + remap(float2(Rand(id), Rand(id*2)), float2(0, 1), float2(-3, 3))];
}
