#include "Utils.hlsl"
#pragma kernel CSMain

RWTexture2D<float4> Result;
int seed;

void moveLeft(uint3 id,uint kind)
{
    if(checkKind(left_2(id),kind)||checkKind(leftUp(id),kind))
        return;
    setZ(id.xy,DIR_LEFT);
    move(id.xy,left(id));
}

void moveRight(uint3 id,uint kind)
{
    if(checkKind(right_2(id),kind)||checkKind(rightUp(id),kind))
        return;
    setZ(id.xy,DIR_RIGHT);
    move(id.xy,right(id));
}

void updateLiquid(uint3 id,uint kind)
{
    float4 ori=Result[id.xy];
    
    //重力
    if(isAir(Result[down(id)]))
    {
        setZ(id.xy,DIR_KEEP);
        move(id.xy,down(id));
    }
    else
    {
        bool l1=isAir(Result[left(id)]);
        bool r1=isAir(Result[right(id)]);
        bool l2=isAir(Result[left_2(id)]);
        bool r2=isAir(Result[right_2(id)]);

        if(l1&&r1)
        {
            if(l2&&!r2)
                moveLeft(id,kind);
            else if(r2&&!l2)
                moveRight(id,kind);
            else
            {
                uint dir=float2int(ori.z);
                bool mLeft=dir==DIR_KEEP?rand(id,seed)<0.5f:dir==DIR_LEFT;

                if(mLeft)
                    moveLeft(id,kind);
                else
                    moveRight(id,kind);
            }
        }
        else if(l1)
            moveLeft(id,kind);
        else if(r1)
            moveRight(id,kind);
        else
            setZ(id.xy,DIR_KEEP);
    }
}

void updateOil(uint3 id)
{
    uint kind1=float2int(Result[left(id)].x);
    uint kind2=float2int(Result[right(id)].x);
    uint kind3=float2int(Result[down(id)].x);
    uint kind4=float2int(Result[up(id)].x);

    bool nearFire=kind1==FIRE||kind2==FIRE||kind3==FIRE||kind4==FIRE;
    bool nearFireSource=kind1==FIRE_SOURCE||kind2==FIRE_SOURCE||kind3==FIRE_SOURCE||kind4==FIRE_SOURCE;
    bool nearAir=kind1==EMPTY||kind2==EMPTY||kind3==EMPTY||kind4==EMPTY;
    
    if(nearAir&&nearFireSource||nearFire)
    {
        setKind(id.xy,FIRE_SOURCE);
        setY(id.xy,5);
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(checkKind(id.xy,WATER))
        updateLiquid(id,WATER);
    else if(checkKind(id.xy,OIL))
    {
        updateLiquid(id,OIL);
        updateOil(id);
    }
}


bool checkKind(uint2 id,uint kind)
{
    return float2int(Result[id.xy].x)==kind;
}

void move(uint2 id,uint2 nbrId)
{
    float temp=Result[id.xy].x;
    Result[id.xy]=float4(Result[nbrId].x,Result[id.xy].yzw);
    Result[nbrId]=float4(temp.x,Result[nbrId].yzw);
}

void setKind(uint2 id,uint kind)
{
    float4 ori=Result[id.xy];
    Result[id.xy]=float4(int2float(kind),ori.yzw);
}

void setY(uint2 id,uint value)
{
    float4 ori=Result[id.xy];
    Result[id.xy]=float4(ori.x,int2float(value),ori.zw);
}

void setZ(uint2 id,uint value)
{
    float4 ori=Result[id.xy];
    Result[id.xy]=float4(ori.x,ori.y,int2float(value),ori.w);
}

void setW(uint2 id,uint value)
{
    float4 ori=Result[id.xy];
    Result[id.xy]=float4(ori.x,ori.y,ori.z,int2float(value));
}
